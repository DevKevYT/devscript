#EXAMPLE 2: VARIABLES#

#You can declare and modify variables using the "=" command (Command name is shifted by one to the right)
You can put any character into the variable name, except: "$", ".", ";" and obviously space characters.
Reserved characters like "[", "]", """, "<", ">", "{", "}" may cause weird behaviors.
So in general, you should avoid reserved characters#
	foo = "Some text";
	2 = "More text";
	=*2_&] = "Why would you even name your variable like this?";


#You can access variables by using the "$" character, followed by the variable name#
	println $foo;
	println $=*2_&];
	println $2;


#Variables are entirely replaced by their respective value, so theoretically, you can even do this.
This example will store the command name in a variable and execute it with the given argument:#
	commandNameAsVariable = println;
	$commandNameAsVariable $foo; #<- Replaced by 'println "Some text"' and executed at runtime! #


#To read variables, you use the "$" sign. But you don't use it to modify variables
Here we change the value of the variable "foo" to "Changed the text!"#
	foo = "Changed the text!";
	println $foo;


#This rule of variable modification also applies to arrays (Tutorial 4) and Objects (Tutorial 7):#
#We print the first array element ("1") but we will change it to "10"#
	array = [1 2 3];	#More on this in tutorial 3#
	println $array[0]; 	#<- Access with $ sign#
	array[0] = 10;	#<- Modify without $ sign#
	$array[0] = 10;	#This will create a variable with the name "10", since the value of $array[0] is 10#
	println $array[0];
	println array[0];	#<- This will just print "array[0]", but not the actual value. You forgot the "$"!#
	
	obj = (new-object {}); #More on this in tutorial 5#
	obj.x = 10;
	println $obj.x;


#You can list all accessible variables and their Block for debug purposes by executing this command#
	listvars;
