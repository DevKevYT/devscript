#FUNCTION AND BLOCK BASICS by DevKev for version 1.9.10#

#You can declare a function like a variable (A function is basically just a variable with the type "Block" in DevScript
To declare blocks, you can use any code wrapped by a "{" and "}"#
	emptyFunction = {
	};
	printSomeText = {
		x = 10;
		println "The variable is " $x;
	};
	println $emptyFunction;


#If you print out the variable "$emptyFunction" above, the output will look like this:
	BLOCK:F 1
BLOCK: signalizes that this variable is a block (A function, constructor, whatever)
F signalizes that the block is a function (It has the function flag "F")
Here is a list of all the block flags:
	F = Function 	-> The block is a function
	O = Object		-> The block is an object (Tutorial 7)
	T = Try/Catch	-> The block belongs to a try/catch statement (It will not exit the script if errors occur inside the block)
	L = Loop		-> The block is a loop (For example a "for" loop) that can be interrupted
The 1 is just the stack the block is located
Flags are set automatically, but you might want to know this for debugging purposes or if you want to create your own custom blocks#


#To call, or execute a function, use the "call" command#
call $printSomeText;


#Pass some arguments to a function. Arguments inside the function are disguised as $0, $1 etc., depending on how many arguments you pass#
printTextXTimes = {
	amount = $0;	#<- You can set a new variable with a better name to make the code more readable#
	for i $amount {
		println $1;
	};
};
call $printTextXTimes 3 "text";


#Functions can also return values. Normally it is "null":#
add = {
	num1 = $0;
	num2 = $1;
	result = ($num1 + $num2);
	return $result;
};
println (call $add 2 4);


#This is a shorter version:#
add = {
	return ($0 + $1);
};
println (call $add 2 4);


 
